DROP TABLE IF EXISTS COURSE_TEACHER;
DROP TABLE IF EXISTS COURSE_GROUP;
DROP TABLE IF EXISTS LESSON;
DROP TABLE IF EXISTS TIMETABLE;
DROP TABLE IF EXISTS ROOM;
DROP TABLE IF EXISTS TEACHER;
DROP TABLE IF EXISTS STUDENT;
DROP TABLE IF EXISTS COURSE;
DROP TABLE IF EXISTS UNI_GROUP;

CREATE TABLE COURSE (
COURSE_ID		SERIAL  PRIMARY KEY,
COURSE_NAME		VARCHAR(20)  NOT NULL,
COURSE_DESCRIPTION	VARCHAR(40)
);


CREATE TABLE UNI_GROUP (
GROUP_ID	SERIAL  PRIMARY KEY,
GROUP_NAME	VARCHAR(20) NOT NULL
);


CREATE TABLE ROOM (
ROOM_ID		SERIAL            PRIMARY KEY,
CAMPUS		VARCHAR(20)       NOT NULL,
ADDRESS		VARCHAR(40)       NOT NULL,
ROOM_NUMBER	SMALLINT          NOT NULL
);

CREATE TABLE TIMETABLE (
TIMETABLE_ID		SERIAL  PRIMARY KEY,
DESCRIPTION         VARCHAR(40)
);

CREATE TABLE STUDENT (
STUDENT_ID	SERIAL PRIMARY KEY,
FIRST_NAME		VARCHAR(20) NOT NULL,
LAST_NAME		VARCHAR(20) NOT NULL,
GROUP_ID	INT,
TITLE		VARCHAR(20) NOT NULL,
DESCRIPTION	VARCHAR(40),
FOREIGN KEY (GROUP_ID) REFERENCES UNI_GROUP (GROUP_ID)
);


CREATE TABLE TEACHER (
TEACHER_ID	SERIAL PRIMARY KEY,
FIRST_NAME		VARCHAR(20) NOT NULL,
LAST_NAME		VARCHAR(20) NOT NULL,
TITLE		VARCHAR(20) NOT NULL,
DESCRIPTION	VARCHAR(40),
SOCIAL_MEDIA	VARCHAR(20)
);


CREATE TABLE COURSE_TEACHER (
COURSE_ID		INT,
TEACHER_ID		INT,
FOREIGN KEY (COURSE_ID) REFERENCES COURSE (COURSE_ID),
FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER (TEACHER_ID),
PRIMARY KEY (COURSE_ID, TEACHER_ID)
);


CREATE TABLE LESSON (
LESSON_ID	SERIAL PRIMARY KEY,
GROUP_ID	INT,
ROOM_ID		INT,
TEACHER_ID	INT,
COURSE_ID	INT,
TIMETABLE_ID INT,
CALENDAR	TIMESTAMP,
FOREIGN KEY (GROUP_ID) REFERENCES UNI_GROUP (GROUP_ID),
FOREIGN KEY (ROOM_ID) REFERENCES ROOM (ROOM_ID),
FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER (TEACHER_ID),
FOREIGN KEY (COURSE_ID) REFERENCES COURSE (COURSE_ID),
FOREIGN KEY (TIMETABLE_ID) REFERENCES TIMETABLE (TIMETABLE_ID)
);


CREATE TABLE COURSE_GROUP (
COURSE_GROUP_ID	SERIAL PRIMARY KEY,
COURSE_ID		INT,
GROUP_ID		INT,
FOREIGN KEY (COURSE_ID) REFERENCES COURSE (COURSE_ID),
FOREIGN KEY (GROUP_ID) REFERENCES UNI_GROUP (GROUP_ID)
);